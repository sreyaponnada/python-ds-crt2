#STACK IS LIFO - LAST IN FIRST OUT
stack=[]
def push():
    element=int(input("Enter the element"))
    stack.append(element)
    print(stack)
def pop_element():
    if not stack:
        print("Stack is empty")
    else:
        e=stack.pop()
        print("Removed element: ",e)
        print(stack)
while True:
    print("Select operation 1.push 2.pop 3.quit")
    choice=int(input())
    if choice==1:
        push()
    elif choice==2:
        pop_element()
    elif choice==3:
        break
    else:
        print("Enter the correct operation")


#STACK IMPLEMENTATION USING LINKED LIST

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Stack:
    def __init__(self):
        self.head=None
    def isempty(self):
        if self.head==None:
            return True
        else:
            return False
    def push(self,data):
        if self.head==None:
            self.head=Node(data)
        else:
            newnode=Node(data)
            newnode.next=self.head
            self.head=newnode
    def pop(self):
        if self.isempty():
            return None
        else:
            poppednode=self.head
            self.head=self.head.next
            poppednode.next=None
            return poppednode.data
    def peek(self):
        if self.isempty():
            return None
        else:
            return self.head.data
    def display(self):
        t=self.head
        if self.isempty():
            print("Stack Underflow")
        else:
            while(t!=None):
                print(t.data,end="")
                t=t.next
                if(t!=None):
                    print("->",end="")
            return
if __name__=="__main__":
    S=Stack()
    S.push(1)
    S.push(2)
    S.push(3)
    S.push(4)
    S.display()
    print("")
    print("peek",S.peek())
    S.pop()
    S.pop()
    S.display()
    print("")
    print("peek",S.peek())


#STACK IMPLEMENTATION USING QUEUE MODULE

from queue import LifoQueue

s=LifoQueue(maxsize=3)

print(s.qsize())

s.put('a')
s.put('b')

s.put('c')

print(s.full())
print(s.qsize())
print(s.get())
print(s.get())
print(s.get())

print(s.empty())


#QUEUE IMPLEMENTATION USING LIST

queue=[]
def enqueue():
    element=input("Enter element")
    queue.append(element)
    print(element,"is added in Q")
def dequeue():
    if not queue:
        print("Q is empty")
    else:
        e=queue.pop(0)
        print("removed element",e)
def display():
    print(queue)
while True:
    print("Select operation 1.enqueue 2.dequeue 3.show 4.quit")
    choice=int(input())
    if choice==1:
        enqueue()
    elif choice==2:
        dequeue()
    elif choice==3:
        display()
    elif choice==4:
        break
    else:
        print("Please enter correct operation")
        
    
#QUEUE IMPLEMENTATION USING QUEUE MODULE

import queue
L=queue.Queue(maxsize=5)

L.put(10)
L.put(20)

print(type(L))

print(L.get())
print(L.get())


#create two stacks
#define size of both stacks as 5
#if your input is even it has to be pushed in stack_1 and other inputs has to be pushed in stack_2
#options:push/pop/display/quit

stack_1=[]
stack_2=[]

def push():
    for element in range(5):
        element=int(input("Enter the element:"))
        if element%2==0:
            stack_1.append(element)
        else:
            stack_2.append(element)
def pop_element():
    pop_what=input("1 or 2")
    if pop_what=="1":
        if not stack_1:
            print("stack_1 is empty")
        else:
            e=stack_1.pop()
            print("Removed element:",e)
            print(stack_1)
    else:
        if not stack_2:
            print("stack_2 is empty")
        else:
            e=stack_2.pop()
            print("Removed element:",e)
            print(stack_2)
def display():
    what=input("1 or 2")
    if what=="1":
        print(stack_1)
    else:
        print(stack_2)
while True:
    print("select operation 1.push 2.pop 3.display 4.quit")
    choice=int(input())
    if choice==1:
        push()
    elif choice==2:
        pop_element()
    elif choice==3:
        display()
    elif choice==4:
        break
    else:
        print("Enter correct operation")
    

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Queue:
    def __init__(self):
        self.head=None
        self.last=None

    def enqueue(self,data):
        if self.last is None:
            self.head=Node(data)
            self.last=self.head
        else:
            self.last.next=Node(data)
            self.last=self.last.next
    def dequeue(self):
        if self.head is None:
            return None
        else:
            to_return=self.head.data
            self.head=self.head.next
            return to_return
a_queue=Queue()
while True:
    print('enqueue <value>')
    print('dequeue')
    print('quit')
    do=input('What would you like to do?').split()
    operation=do[0].strip().lower()
    if operation=='enqueue':
        a_queue.enqueue(int(do[1]))
    elif operation=='dequeue':
        dequeue=a_queue.dequeue()
        if dequeue is None:
            print('Queue is empty.')
        else:
            print('dequeued element:',int(dequeue))
    elif operation=='quit':
        break
        
            
class CircularQueue():
    def __init__(self,size):
        self.size=size
        self.queue=[None for i in range(size)]
        self.front=self.rear=-1
    def enqueue(self,data):
        if ((self.rear+1)%self.size==self.front):
            print("Queue is Full\n")
        elif (self.front==-1):
            self.front=0
            self.rear=0
            self.queue[self.rear]=data
        else:
            self.rear==(self.rear+1)%self.size
            self.queue[self.rear]=data
    def dequeue(self):
        if(self.front==-1):
            print("Queue is Empty\n")
        elif(self.front==self.rear):
            temp=self.queue[self.front]
            self.front=-1
            self.rear=-1
            return temp
        else:
            temp=self.queue[self.front]
            self.front=[self.front+1]%self.size
            return temp
    def display(self):
        if(self.front==-1):
            print("Queue is Empty")
        elif(self.rear>=self.front):
            print("Elements in the Circular Queue are: ",end=" ")
            for i in range(self.front,self.rear+1):
                print(self.queue[i],end=" ")
            print()
        else:
            print("Elements in the Circular Queue are: ",end=" ")
            for i in range(self.front,self.size):
                print(self.queue[i],end=' ')
            for i in range(0,self.rear+1):
                print(self.queue[i],end=' ')
            print()
        if((self.rear+1)%self.size==self.front):
            print("Queue is Full")
            
ob=CircularQueue(5)
ob.enqueue(14)
ob.enqueue(22)
ob.enqueue(13)
ob.enqueue(-6)
ob.display()
print("Deleted value= ",ob.dequeue())
print("Deleted value= ",ob.dequeue())
ob.display()
ob.enqueue(9)
ob.enqueue(20)
ob.enqueue(5)
ob.display()

ob.enqueue(100)


